Database Schema Specification
This document lists the schema and purpose of all the
collections used/shared across all versions of Meteoric Daisy

Note that each document will have its own _id by default.

Meteor.user
	added via useraccounts:core (i.e. useraccounts:ionic)
	see https://github.com/meteor-useraccounts/core/blob/master/Guide.md
	for full documentation

	There are two types of users: patients and staff.
	Both types of accounts share the following fields.
		email:
			a string containing the user email
	
	**Note that these two are not separate fields in the document, but are contained
	in the Meteor-supplied "profile" object.
		name:
			a space separated string of form "<first name> <last name>"
		
		phone #:
			a string of form xxx-xxx-xxxx, where each x is a digit from 0 to 9.

	Patient documents additionally contain:
		medical record #
		exam #
		birth

appointments
	contains detailed information for each appointment
	Document Format :
		user_id : the Meteor.accounts userId of the user who has this appointment
		proc_type : 
			a string representing the type of procedure. 
			Current range of values: ["Lobotomy", "CT"]
		date :
			the appointment's scheduled date
		location:
			a string indicating the appointment site
		organization:
			a string indicating the responsible organization
		department:
			a string indicating the relevant department of said responsible organization
		ordering_physician:
			the Mongo assigned _id of the staff account who ordered this appointment.
		reason:
			a string indicating why the appointment was ordered
		last_checked:
			Javascript Date timestamp indicating when all obligations have been last viewed
			by medical staff. see entry under "preparations".
		updated_by_client:
			a boolean indicating whether or not: 1) the appointment was last updated by the client AND
			2) this update was seen by the staff. 
			is initialized to true at the time of document creation.

medicalInfo
	contains descriptions of medical procedures 
	Document Format:
		proc_type : 
			contains the type of procedure
			takes on one of the following values:
		text :
			contains textual description
			NOTE: all text is escaped and rendered as is

preparations
	contains preparation requirements for each appointment
	Document Format:
		appointment_id : 
			the Mongo assigned _id of the appointment under which this preparation is grouped
		completed: 
			a boolean indicating whether the patient has fulfilled this requirement, either "true", "false"
		text: 
			the requirement, in text
		date_by: 
			the day this requirement is filed under, represented by a Javascript date object
		last_updated:
			a Javascript Date timestamp indicating when this obligation was last updated by the user.
			is initialized to date of creation.
		last_checked:
			a Javascript Date timestamp indicating when this obligation was last viewed by medical staff.
			**[PROPOSED/CURRENTLY IMPLEMENTED CHANGE]
			since all obligations share the same last_checked timestamp, i.e. they're all "viewed" when
			staff read an appointment_detail page, this field should be stored in an appointment 
			document.

user_to_push_id_map
	contains documents mapping users to which instances of the mobile version of the app we should send 
	push notifications to. since raix:push generates a unique application id for each android app, when a user logs in,
	their account is associated with that app id.

	Document Format:
		user_id:
			a string containing the **Meteor.accounts** userId of a target user
		push_app_id:
			a string containing the unique id of a certain instance of the mobile app
		

notifications
	contains notification documents that the server needs to send out
	in the future. Their purpose is further explained in Section 3, Notifications,
	of the PatientClientDesignSpec.

	Document Format:
		notification_type:
			a string indicating the type of the appointment: either "appointment" or "obligation"
		user_id:
			a string containing the **Meteor.accounts** userId of target user to send the notification to.
		from:
			a string containing text for the "from" field in the Push.send API call
		title:
			a string containing text for the "title" field in the Push.send API call
		text: 
			a string containing text for the "title" field in the Push.send API call
		send_by:
			a Javascript Date object indicating the approximate deadline for sending the notification

messages
	contains a sequence of messages sent from a patient to the ordering physician responsible for 
	an appointment. 

	Document Format:
		text:
			a string containing the message body
		to_id:
			Meteor.accounts userId of the intended recipient
		from_id:
			meteor.accounts userId of the patient/sender
		date:
			message timestamp

======EXPERIMENTAL=====
user_to_push_id_map
	unused as of 6/11
		

